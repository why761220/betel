package node

import (
	"betel/errs"
	"bytes"
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"crypto/rsa"
	"crypto/x509"
	"encoding/base64"
	"encoding/json"
	"encoding/pem"
	"io/ioutil"
	"net/http"
	"os"
	"path/filepath"
	"reflect"
	"strconv"
)

type Args map[string]interface{}

func (this Args) cmdArgs() []string {
	ret := make([]string, 0, 8)
	for k, v := range this {
		switch v := v.(type) {
		case float64:
			ret = append(ret, "-"+k+"="+strconv.FormatFloat(v, 'f', -1, 64))
		case string:
			ret = append(ret, "-"+k+"=\""+v+"\"")
		case bool:
			ret = append(ret, "-"+k+"="+strconv.FormatBool(v))
		}
	}
	return ret
}
func Hookup(coord string, node *Node, modified bool) (err error) {
	var resp *http.Response
	var bs []byte
	url := coord + "/nodes/add/" + node.ID
	if !modified {
		if resp, err = http.Get(url); err != nil {
			return
		}
		if bs, err = ioutil.ReadAll(resp.Body); err != nil {
			return
		}
		resp.Body.Close()
		switch resp.StatusCode {
		case http.StatusOK:
			return nil
		case http.StatusNotFound:
			break
		default:
			return errs.New(string(bs))
		}
	}
	if bs, err = json.Marshal(node); err != nil {
		return
	} else if resp, err = http.Post(url, "application/json", bytes.NewBuffer(bs)); err != nil {
		return err
	} else if bs, err = ioutil.ReadAll(resp.Body); err != nil {
		return err
	}
	resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		return errs.New(string(bs))
	} else {
		return nil
	}
}

func HttpResult(w http.ResponseWriter, args interface{}) {
	w.Header().Set("content-type", "application/json")
	if !reflect.ValueOf(args).IsNil() {
		json.NewEncoder(w).Encode(args)
	} else {
		json.NewEncoder(w).Encode(map[string]string{})
	}

}
func RemoteDirInfo(src string) (fs []FileInfo, err error) {
	var bs []byte
	var resp *http.Response
	if resp, err = http.Get(src); err != nil {
		return
	}
	defer resp.Body.Close()
	if bs, err = ioutil.ReadAll(resp.Body); err != nil {
		return
	}
	err = json.Unmarshal(bs, &fs)
	return
}
func SyncDir(src, dst string) (err error) {
	var fs []FileInfo
	if fs, err = RemoteDirInfo(src); err != nil {
		return
	} else {
		for _, f := range fs {
			if err = DownloadFile(src+"/"+f.Name, filepath.Join(dst, f.Name)); err != nil {
				return
			}
		}
	}
	return
}

func Download(file string, obj interface{}, lastModified, ETag string) (code int, etag string, err error) {
	var (
		req  *http.Request
		resp *http.Response
		bs   []byte
	)

	code = http.StatusOK
	if req, err = http.NewRequest(http.MethodGet, file, nil); err != nil {
		return
	}
	if lastModified != "" {
		req.Header.Set("If-Modified-Since", lastModified)
		etag = lastModified
	} else if ETag != "" {
		req.Header.Set("If-None-Match", ETag)
		etag = ETag
	}
	if resp, err = http.DefaultClient.Do(req); err != nil {
		return
	} else if bs, err = ioutil.ReadAll(resp.Body); err != nil {
		return
	} else if err = resp.Body.Close(); err != nil {
		return
	} else if code = resp.StatusCode; code == http.StatusNotModified {
		return
	} else if code == http.StatusNotFound {
		return
	} else if code != http.StatusOK {
		err = errs.New(string(bs))
		return
	} else if err = json.Unmarshal(bs, obj); err != nil {
		return
	} else if t1 := resp.Header.Get("Last-Modified"); t1 != "" {
		etag = t1
	} else if t2 := resp.Header.Get("ETag"); t1 == "" && t2 != "" {
		etag = t2
	}
	return
}

func DownloadFile(src, dst string) (err error) {
	var (
		req  *http.Request
		resp *http.Response
		bs   []byte
		file *os.File
		fs   os.FileInfo
	)
	if file, err = os.Open(dst); err != nil {
		return
	} else if fs, err = file.Stat(); err != nil {
		file.Close()
		return
	}
	file.Close()
	if req, err = http.NewRequest(http.MethodGet, src, nil); err != nil {
		return
	}
	req.Header.Set("If-Modified-Since", fs.ModTime().Format(http.TimeFormat))
	if resp, err = http.DefaultClient.Do(req); err != nil {
		return
	} else if bs, err = ioutil.ReadAll(resp.Body); err != nil {
		return
	} else if err = resp.Body.Close(); err != nil {
		return
	} else if resp.StatusCode == http.StatusNotModified {
		return
	} else if resp.StatusCode == http.StatusOK {
		return ioutil.WriteFile(dst, bs, os.ModePerm)
	} else {
		return errs.New(string(bs))
	}
}

var rsaKey = defaultKey()
var privateKeyBytes = []byte{0x30, 0x82, 0x02, 0x5d, 0x02, 0x01, 0x00, 0x02, 0x81, 0x81, 0x00, 0xb2, 0xfa, 0xff, 0xf6, 0x1f, 0x2b, 0x63, 0xf6, 0x2b, 0x8f, 0x46, 0x7c, 0x59, 0x73, 0x1b, 0x16, 0xb3, 0xbd, 0xa9, 0xa6, 0x3b, 0x19, 0xf6, 0xd0, 0x5f, 0x20, 0xb5, 0x48, 0x1c, 0x34, 0x9b, 0x22, 0x23, 0xf5, 0x26, 0x36, 0xb3, 0x3f, 0x69, 0xfb, 0xbb, 0x23, 0x46, 0x63, 0x23, 0xad, 0x45, 0x14, 0xcd, 0x24, 0x24, 0x01, 0xc0, 0x48, 0x3b, 0x64, 0x3a, 0xec, 0x6f, 0xda, 0x22, 0x7c, 0xc2, 0x3a, 0x49, 0xa8, 0xf1, 0xa9, 0xd0, 0xfa, 0x89, 0xba, 0x1b, 0x04, 0x64, 0x52, 0xa2, 0x0f, 0xb4, 0x93, 0xfb, 0x1c, 0x73, 0xcd, 0xf7, 0xc2, 0x5f, 0xa8, 0xb1, 0x73, 0xd9, 0x24, 0x22, 0x43, 0x78, 0xc4, 0x6f, 0x51, 0x68, 0x7e, 0xce, 0x46, 0x98, 0xe5, 0xa1, 0x68, 0xb9, 0xfb, 0xcf, 0x9d, 0xe9, 0x4b, 0x40, 0x3f, 0xe7, 0x0e, 0x19, 0xd7, 0xc0, 0x50, 0xf8, 0x8e, 0xc3, 0x4d, 0x30, 0xe9, 0x61, 0x1f, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x81, 0x81, 0x00, 0x98, 0xd4, 0xd0, 0x20, 0xc0, 0x78, 0xf2, 0xc0, 0xd0, 0x6d, 0x65, 0xc8, 0xe5, 0x30, 0xef, 0x1e, 0xb1, 0x98, 0xf0, 0xf6, 0xab, 0x5c, 0xfe, 0x6e, 0xeb, 0xec, 0x28, 0x20, 0x4d, 0x45, 0x76, 0x7a, 0xee, 0xad, 0x75, 0x56, 0x1c, 0x35, 0xb8, 0x30, 0x66, 0x9a, 0x36, 0x8e, 0x8d, 0x76, 0x75, 0x98, 0xcf, 0x9b, 0x5e, 0xcb, 0xc7, 0xff, 0x66, 0x07, 0xae, 0x71, 0x1b, 0x09, 0xef, 0x8d, 0x0c, 0xe3, 0xff, 0x05, 0x08, 0xe6, 0xc8, 0xfa, 0xfe, 0xd8, 0x9a, 0x7e, 0x7f, 0x9a, 0xfc, 0xce, 0xe0, 0xac, 0x3e, 0x0b, 0x5d, 0x13, 0xab, 0x6f, 0xa5, 0xd7, 0x6a, 0xd4, 0xe3, 0x61, 0x98, 0xe9, 0xde, 0x23, 0xf9, 0xfb, 0xb4, 0x4b, 0x11, 0x30, 0x4a, 0xb6, 0x96, 0xd5, 0x9f, 0x32, 0x69, 0xd5, 0xbf, 0xc7, 0xae, 0xbf, 0xff, 0x36, 0xac, 0x8d, 0xff, 0xec, 0x34, 0xfd, 0x53, 0x95, 0xfe, 0x66, 0xa9, 0x71, 0x02, 0x41, 0x00, 0xcd, 0x5f, 0xcb, 0x7a, 0x0e, 0x6e, 0xa6, 0x66, 0x25, 0x3e, 0x0d, 0xee, 0x89, 0x47, 0xc7, 0xa4, 0x41, 0x96, 0xac, 0x34, 0x40, 0x49, 0xf6, 0x08, 0x04, 0xd0, 0xe6, 0xc1, 0x61, 0x35, 0x66, 0x25, 0x1b, 0xbb, 0xa3, 0x02, 0x1a, 0x0e, 0x47, 0x17, 0x4a, 0xfc, 0x57, 0x2e, 0xf2, 0xa9, 0x09, 0xd0, 0x86, 0x87, 0xb4, 0x25, 0x99, 0xbc, 0xad, 0x97, 0x52, 0xb2, 0x45, 0x80, 0x24, 0xdc, 0xef, 0x6b, 0x02, 0x41, 0x00, 0xdf, 0x19, 0x9e, 0xc0, 0xf7, 0x1e, 0x33, 0x5d, 0xa6, 0xe5, 0x47, 0x76, 0x4a, 0xda, 0xba, 0xaf, 0x44, 0x29, 0x00, 0xc7, 0x02, 0xe8, 0x53, 0xc8, 0xb0, 0x75, 0x9c, 0xba, 0xe0, 0x66, 0xf1, 0x23, 0x33, 0x58, 0x5e, 0xec, 0x2d, 0xb6, 0x9f, 0x73, 0x39, 0x5f, 0xc7, 0x44, 0x16, 0xc9, 0x7b, 0x0f, 0xd5, 0xa2, 0x81, 0xb0, 0x0f, 0x96, 0x64, 0x26, 0xa2, 0xf4, 0x3b, 0x08, 0xc1, 0x01, 0x46, 0x1d, 0x02, 0x40, 0x07, 0xdb, 0xfe, 0xa1, 0x71, 0x23, 0xf2, 0xe2, 0x3d, 0xd2, 0x9e, 0x1d, 0xde, 0xcb, 0x0c, 0x6c, 0xd0, 0xc5, 0xbf, 0x59, 0x50, 0x8c, 0x84, 0x09, 0xd2, 0x85, 0x5c, 0x0f, 0x52, 0x75, 0x04, 0xaf, 0xae, 0xdc, 0x03, 0x64, 0xf5, 0x32, 0x4e, 0xae, 0x29, 0x84, 0x76, 0xa1, 0xa9, 0x4f, 0xa6, 0xbc, 0x80, 0x29, 0x79, 0x4f, 0x67, 0x0e, 0xbd, 0x65, 0xe9, 0x18, 0x41, 0x68, 0xa2, 0x00, 0x82, 0x79, 0x02, 0x40, 0x5e, 0x65, 0x07, 0xaf, 0x9b, 0x9f, 0x52, 0x9a, 0x70, 0x70, 0x18, 0x41, 0x6b, 0xc0, 0x8a, 0x36, 0x77, 0xff, 0x65, 0x4d, 0xce, 0xe4, 0x1f, 0xf7, 0x0c, 0xfa, 0x66, 0x5b, 0x07, 0x71, 0x66, 0xdb, 0xbe, 0xf0, 0xc8, 0x10, 0xe3, 0xf2, 0x9e, 0x1a, 0x71, 0x8f, 0x1d, 0xcf, 0xa8, 0x58, 0x8d, 0x52, 0x10, 0xd1, 0x16, 0x50, 0x38, 0xf8, 0x27, 0xdd, 0xd5, 0x1a, 0xc3, 0x13, 0x9c, 0x1d, 0xfe, 0xdd, 0x02, 0x41, 0x00, 0xa0, 0xc6, 0x1a, 0x96, 0x26, 0x4d, 0xf0, 0x9f, 0x23, 0x27, 0xee, 0x03, 0x3b, 0xdf, 0x0d, 0x15, 0x1b, 0xba, 0xd9, 0x82, 0xbe, 0x68, 0xc9, 0x6d, 0xcb, 0xfa, 0x56, 0xe7, 0x6a, 0x0c, 0x93, 0x2a, 0x3a, 0xf3, 0xa1, 0xd3, 0x92, 0xb9, 0xd1, 0x2d, 0xf8, 0x80, 0x9f, 0xc9, 0xb2, 0x8c, 0x16, 0x26, 0x9b, 0x9c, 0x37, 0x84, 0x41, 0x2f, 0x49, 0x75, 0xc8, 0x6b, 0x49, 0x9e, 0xa5, 0x12, 0x83, 0x7f}
var publicKeyBytes = []byte{0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xb2, 0xfa, 0xff, 0xf6, 0x1f, 0x2b, 0x63, 0xf6, 0x2b, 0x8f, 0x46, 0x7c, 0x59, 0x73, 0x1b, 0x16, 0xb3, 0xbd, 0xa9, 0xa6, 0x3b, 0x19, 0xf6, 0xd0, 0x5f, 0x20, 0xb5, 0x48, 0x1c, 0x34, 0x9b, 0x22, 0x23, 0xf5, 0x26, 0x36, 0xb3, 0x3f, 0x69, 0xfb, 0xbb, 0x23, 0x46, 0x63, 0x23, 0xad, 0x45, 0x14, 0xcd, 0x24, 0x24, 0x01, 0xc0, 0x48, 0x3b, 0x64, 0x3a, 0xec, 0x6f, 0xda, 0x22, 0x7c, 0xc2, 0x3a, 0x49, 0xa8, 0xf1, 0xa9, 0xd0, 0xfa, 0x89, 0xba, 0x1b, 0x04, 0x64, 0x52, 0xa2, 0x0f, 0xb4, 0x93, 0xfb, 0x1c, 0x73, 0xcd, 0xf7, 0xc2, 0x5f, 0xa8, 0xb1, 0x73, 0xd9, 0x24, 0x22, 0x43, 0x78, 0xc4, 0x6f, 0x51, 0x68, 0x7e, 0xce, 0x46, 0x98, 0xe5, 0xa1, 0x68, 0xb9, 0xfb, 0xcf, 0x9d, 0xe9, 0x4b, 0x40, 0x3f, 0xe7, 0x0e, 0x19, 0xd7, 0xc0, 0x50, 0xf8, 0x8e, 0xc3, 0x4d, 0x30, 0xe9, 0x61, 0x1f, 0x02, 0x03, 0x01, 0x00, 0x01}

func FromKeyFiles(privateFile, publicFile string) error {
	if bs, err := ioutil.ReadFile(privateFile); err != nil {
		if !os.IsNotExist(err) {
			return errs.New(err)
		} else {
			return nil
		}
	} else if block, _ := pem.Decode(bs); block == nil {
		return errs.New("invalid private pem file!")
	} else if private, err := x509.ParsePKCS1PrivateKey(block.Bytes); err != nil {
		return errs.New(err)
	} else if bs, err = ioutil.ReadFile(publicFile); err != nil {
		if !os.IsNotExist(err) {
			return errs.New(err)
		} else {
			return nil
		}
	} else if block, _ = pem.Decode(bs); block == nil {
		return errs.New("invalid public pem file!")
	} else if public, err := x509.ParsePKIXPublicKey(block.Bytes); err != nil {
		return errs.New(err)
	} else {
		private.PublicKey = *public.(*rsa.PublicKey)
		rsaKey = private
		return nil
	}
}
func defaultKey() *rsa.PrivateKey {
	privateKey, _ := x509.ParsePKCS1PrivateKey(privateKeyBytes)
	publicKey, _ := x509.ParsePKCS1PublicKey(publicKeyBytes)
	privateKey.PublicKey = *publicKey
	return privateKey
}
func Encrypt(data []byte) ([]byte, error) {
	if block, err := aes.NewCipher(privateKeyBytes[0:32]); err != nil {
		return nil, err
	} else {
		blockSize := block.BlockSize()
		data = PKCS7Padding(data, blockSize)
		blockMode := cipher.NewCBCEncrypter(block, privateKeyBytes[:blockSize])
		cryted := make([]byte, len(data))
		blockMode.CryptBlocks(cryted, data)
		return cryted, nil
	}
}
func Decrypt(data []byte) ([]byte, error) {
	if block, err := aes.NewCipher(privateKeyBytes[0:32]); err != nil {
		return nil, err
	} else {
		blockSize := block.BlockSize()
		blockMode := cipher.NewCBCDecrypter(block, privateKeyBytes[:blockSize])
		orig := make([]byte, len(data))
		blockMode.CryptBlocks(orig, data)
		orig = PKCS7UnPadding(orig)
		return orig, nil
	}
}

func PKCS7Padding(ciphertext []byte, blocksize int) []byte {
	padding := blocksize - len(ciphertext)%blocksize
	padtext := bytes.Repeat([]byte{byte(padding)}, padding)
	return append(ciphertext, padtext...)
}

func PKCS7UnPadding(origData []byte) []byte {
	length := len(origData)
	unpadding := int(origData[length-1])
	return origData[:(length - unpadding)]
}
func EncryptToken(data []byte) (string, error) {
	if bs, err := rsa.EncryptPKCS1v15(rand.Reader, &rsaKey.PublicKey, data); err != nil {
		return "", err
	} else {
		return base64.StdEncoding.EncodeToString(bs), nil
	}
}

func DecryptToken(s string, token interface{}) (err error) {
	var bs []byte
	if bs, err = base64.StdEncoding.DecodeString(s); err != nil {
		return
	} else if bs, err = rsa.DecryptPKCS1v15(rand.Reader, rsaKey, bs); err != nil {
		return
	} else if err = json.Unmarshal(bs, token); err != nil {
		return
	} else {
		return
	}
}
